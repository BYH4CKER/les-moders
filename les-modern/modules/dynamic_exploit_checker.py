#!/usr/bin/env python3
"""
Dynamic Exploit Checker
========================
Real-time exploit and CVE analysis system
"""

import re
from datetime import datetime
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn
from modules.cve_fetcher import CVEFetcher

console = Console()

class DynamicExploitChecker:
    def __init__(self, verbose=False):
        self.verbose = verbose
        self.cve_fetcher = CVEFetcher(verbose=verbose)
    
    def analyze_system(self, system_info):
        """Sistem bilgilerine göre dinamik analiz yap"""
        kernel_version = system_info.get('kernel', {}).get('release', '')
        distro_info = system_info.get('distro', {})
        
        if not kernel_version:
            console.print("[red]Kernel version not found[/red]")
            return None
        
        # Kernel versiyonunu temizle
        clean_kernel = self._clean_kernel_version(kernel_version)
        console.print(f"[cyan]Analyzing kernel version: {clean_kernel}[/cyan]")
        
        # Internet bağlantısını kontrol et
        if not self.cve_fetcher.test_connection():
            console.print("[yellow]Falling back to offline mode...[/yellow]")
            return self._offline_analysis(clean_kernel, distro_info)
        
        # Online analiz
        return self._online_analysis(clean_kernel, distro_info, system_info)
    
    def _online_analysis(self, kernel_version, distro_info, system_info):
        """Online CVE ve exploit analizi"""
        results = {
            'kernel_version': kernel_version,
            'analysis_timestamp': datetime.now().isoformat(),
            'cves_found': [],
            'exploit_summary': {},
            'security_recommendations': [],
            'distro_specific_info': {}
        }
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            # CVE arama
            task1 = progress.add_task("Searching for kernel CVEs...", total=None)
            cves = self.cve_fetcher.search_kernel_cves(kernel_version)
            progress.update(task1, completed=True)
            
            # Sonuçları işle
            task2 = progress.add_task("Processing vulnerability data...", total=None)
            results['cves_found'] = cves
            results['exploit_summary'] = self._generate_exploit_summary(cves)
            progress.update(task2, completed=True)
            
            # Güvenlik önerileri
            task3 = progress.add_task("Generating security recommendations...", total=None)
            results['security_recommendations'] = self._generate_recommendations(
                kernel_version, cves, distro_info
            )
            progress.update(task3, completed=True)
        
        # CVE bulunamadıysa genel bilgi ver
        if not cves:
            general_info = self.cve_fetcher.search_non_vulnerable_info(kernel_version)
            if general_info:
                results['general_security_info'] = general_info
        
        return results
    
    def _offline_analysis(self, kernel_version, distro_info):
        """Offline mod analizi"""
        console.print("[yellow]Running offline analysis...[/yellow]")
        
        # Temel kernel güvenlik bilgileri
        offline_data = {
            'kernel_version': kernel_version,
            'analysis_mode': 'offline',
            'basic_recommendations': [
                'Update to latest stable kernel version',
                'Enable kernel security features (KASLR, SMEP, SMAP)',
                'Monitor security mailing lists',
                'Check distribution security advisories'
            ],
            'known_vulnerable_patterns': self._check_known_patterns(kernel_version),
            'general_security_status': self._assess_kernel_age(kernel_version)
        }
        
        return offline_data
    
    def _generate_exploit_summary(self, cves):
        """CVE listesinden exploit özeti oluştur"""
        summary = {
            'total_cves': len(cves),
            'by_severity': {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0, 'UNKNOWN': 0},
            'with_exploits': 0,
            'highest_cvss': 0,
            'latest_cve': None,
            'most_critical': None
        }
        
        for cve in cves:
            severity = cve.get('severity', 'UNKNOWN')
            summary['by_severity'][severity] += 1
            
            # Exploit var mı kontrol et
            if cve.get('exploits'):
                summary['with_exploits'] += 1
            
            # En yüksek CVSS skoru
            cvss = cve.get('cvss_score', 0)
            if cvss > summary['highest_cvss']:
                summary['highest_cvss'] = cvss
                summary['most_critical'] = cve
            
            # En son CVE
            if not summary['latest_cve'] or cve.get('published_date', '') > summary['latest_cve'].get('published_date', ''):
                summary['latest_cve'] = cve
        
        return summary
    
    def _generate_recommendations(self, kernel_version, cves, distro_info):
        """Güvenlik önerileri oluştur"""
        recommendations = []
        
        # Kernel versiyonu bazlı öneriler
        if self._is_old_kernel(kernel_version):
            recommendations.append("URGENT: Kernel version is outdated - update immediately")
        
        # CVE bazlı öneriler
        critical_cves = [cve for cve in cves if cve.get('severity') == 'CRITICAL']
        if critical_cves:
            recommendations.append(f"CRITICAL: {len(critical_cves)} critical vulnerabilities found")
            recommendations.append("Apply security patches immediately")
        
        high_cves = [cve for cve in cves if cve.get('severity') == 'HIGH']
        if high_cves:
            recommendations.append(f"HIGH: {len(high_cves)} high severity vulnerabilities found")
        
        # Genel öneriler
        recommendations.extend([
            "Enable automatic security updates",
            "Monitor kernel security mailing lists",
            "Use kernel hardening options",
            "Implement defense in depth strategies"
        ])
        
        # Dağıtım spesifik öneriler
        distro_name = distro_info.get('name', '').lower()
        if 'ubuntu' in distro_name:
            recommendations.append("Check Ubuntu Security Notices (USN)")
        elif 'debian' in distro_name:
            recommendations.append("Monitor Debian Security Advisory (DSA)")
        elif 'red hat' in distro_name or 'rhel' in distro_name:
            recommendations.append("Check Red Hat Security Advisory (RHSA)")
        elif 'centos' in distro_name:
            recommendations.append("Monitor CentOS security announcements")
        
        return recommendations
    
    def _check_known_patterns(self, kernel_version):
        """Bilinen zafiyet kalıplarını kontrol et"""
        patterns = []
        
        version_parts = kernel_version.split('.')
        if len(version_parts) >= 2:
            major = int(version_parts[0])
            minor = int(version_parts[1])
            
            # Bilinen problemli sürümler
            if major < 4:
                patterns.append("Very old kernel - multiple known vulnerabilities")
            elif major == 4 and minor < 19:
                patterns.append("Old kernel version - potential security issues")
            elif major == 5 and minor < 4:
                patterns.append("Check for backported security fixes")
        
        return patterns
    
    def _assess_kernel_age(self, kernel_version):
        """Kernel yaşını değerlendir"""
        version_parts = kernel_version.split('.')
        if len(version_parts) >= 2:
            major = int(version_parts[0])
            minor = int(version_parts[1])
            
            if major >= 6:
                return "Modern kernel version"
            elif major == 5 and minor >= 15:
                return "Stable LTS kernel"
            elif major == 5 and minor >= 4:
                return "Supported kernel version"
            elif major == 4 and minor >= 19:
                return "Older LTS kernel - check EOL status"
            else:
                return "Outdated kernel - security risk"
        
        return "Unable to assess kernel age"
    
    def _is_old_kernel(self, kernel_version):
        """Kernel eski mi kontrol et"""
        try:
            version_parts = kernel_version.split('.')
            major = int(version_parts[0])
            minor = int(version_parts[1])
            
            # 5.0'dan eski sürümler eski sayılır
            return major < 5 or (major == 5 and minor < 4)
        except:
            return False
    
    def _clean_kernel_version(self, kernel_version):
        """Kernel versiyonunu temizle"""
        # 5.15.0-91-generic -> 5.15.0 formatına çevir
        match = re.match(r'^(\d+\.\d+(?:\.\d+)?)', kernel_version)
        return match.group(1) if match else kernel_version
    
    def display_results(self, results):
        """Sonuçları güzel formatta göster"""
        if not results:
            console.print("[red]No analysis results available[/red]")
            return
        
        kernel_version = results.get('kernel_version', 'Unknown')
        console.print(f"\n[bold cyan]Security Analysis for Kernel {kernel_version}[/bold cyan]")
        
        # CVE özeti
        if 'exploit_summary' in results:
            summary = results['exploit_summary']
            self._display_summary_table(summary)
        
        # CVE detayları
        if 'cves_found' in results and results['cves_found']:
            self._display_cve_table(results['cves_found'])
        else:
            console.print("\n[green]No critical vulnerabilities found for this kernel version[/green]")
            
            # Genel güvenlik bilgisi varsa göster
            if 'general_security_info' in results:
                self._display_general_info(results['general_security_info'])
        
        # Güvenlik önerileri
        if 'security_recommendations' in results:
            self._display_recommendations(results['security_recommendations'])
    
    def _display_summary_table(self, summary):
        """Özet tablosunu göster"""
        table = Table(title="Vulnerability Summary", show_header=True, header_style="bold magenta")
        table.add_column("Metric", style="cyan", width=20)
        table.add_column("Value", style="yellow")
        
        table.add_row("Total CVEs", str(summary['total_cves']))
        table.add_row("Critical", str(summary['by_severity']['CRITICAL']))
        table.add_row("High", str(summary['by_severity']['HIGH']))
        table.add_row("Medium", str(summary['by_severity']['MEDIUM']))
        table.add_row("With Exploits", str(summary['with_exploits']))
        table.add_row("Highest CVSS", f"{summary['highest_cvss']:.1f}")
        
        console.print(table)
    
    def _display_cve_table(self, cves):
        """CVE tablosunu göster"""
        table = Table(title="Found CVEs and Vulnerabilities", show_header=True, header_style="bold magenta")
        table.add_column("#", style="dim", width=3)
        table.add_column("CVE ID", style="bold yellow")
        table.add_column("CVSS", justify="center", width=6)
        table.add_column("Severity", justify="center")
        table.add_column("Description", style="cyan")
        table.add_column("Exploits", justify="center")
        
        for i, cve in enumerate(cves[:20], 1):  # İlk 20 CVE
            cve_id = cve.get('cve_id', 'N/A')
            cvss = f"{cve.get('cvss_score', 0):.1f}"
            severity = cve.get('severity', 'UNKNOWN')
            description = cve.get('description', '')[:60] + '...' if len(cve.get('description', '')) > 60 else cve.get('description', '')
            exploit_count = len(cve.get('exploits', []))
            
            # Severity renklendirme
            if severity == 'CRITICAL':
                severity_colored = "[bold red]CRITICAL[/bold red]"
            elif severity == 'HIGH':
                severity_colored = "[bold orange1]HIGH[/bold orange1]"
            elif severity == 'MEDIUM':
                severity_colored = "[yellow]MEDIUM[/yellow]"
            else:
                severity_colored = "[dim]LOW[/dim]"
            
            exploit_text = f"{exploit_count} found" if exploit_count > 0 else "None"
            
            table.add_row(str(i), cve_id, cvss, severity_colored, description, exploit_text)
        
        console.print(table)
        
        if len(cves) > 20:
            console.print(f"\n[dim]... and {len(cves) - 20} more CVEs found[/dim]")
    
    def _display_general_info(self, general_info):
        """Genel güvenlik bilgisini göster"""
        console.print(f"\n[bold green]General Security Status[/bold green]")
        console.print(f"Status: {general_info.get('security_status', 'Unknown')}")
        console.print(f"Kernel EOL Info: {general_info.get('kernel_eol_info', 'Check kernel.org')}")
        
        recent_cves = general_info.get('recent_cves', [])
        if recent_cves:
            console.print(f"\n[cyan]Recent Kernel CVEs (Last 30 days):[/cyan]")
            for cve in recent_cves[:5]:
                console.print(f"  {cve['cve_id']}: {cve['description']}")
    
    def _display_recommendations(self, recommendations):
        """Güvenlik önerilerini göster"""
        if not recommendations:
            return
        
        console.print(f"\n[bold yellow]Security Recommendations:[/bold yellow]")
        for i, rec in enumerate(recommendations, 1):
            if rec.startswith('URGENT') or rec.startswith('CRITICAL'):
                console.print(f"  {i}. [bold red]{rec}[/bold red]")
            elif rec.startswith('HIGH'):
                console.print(f"  {i}. [bold orange1]{rec}[/bold orange1]")
            else:
                console.print(f"  {i}. {rec}")
    
    def export_cve_links(self, results, output_dir):
        """CVE ve exploit linklerini dosyaya kaydet"""
        if not results or 'cves_found' not in results:
            return None
        
        import os
        
        links_file = os.path.join(output_dir, "cve_exploit_links.txt")
        
        try:
            with open(links_file, 'w', encoding='utf-8') as f:
                f.write(f"CVE and Exploit Links for Kernel {results['kernel_version']}\n")
                f.write("=" * 60 + "\n")
                f.write(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                for cve in results['cves_found']:
                    f.write(f"CVE: {cve['cve_id']}\n")
                    f.write(f"CVSS: {cve.get('cvss_score', 0):.1f} ({cve.get('severity', 'UNKNOWN')})\n")
                    f.write(f"Description: {cve.get('description', 'N/A')}\n")
                    
                    exploits = cve.get('exploits', [])
                    if exploits:
                        f.write("Exploit Links:\n")
                        for exploit in exploits:
                            f.write(f"  - {exploit['source']}: {exploit['url']}\n")
                    else:
                        f.write("Exploit Links: None found\n")
                    
                    f.write("-" * 40 + "\n")
            
            console.print(f"[green]CVE links exported to: {links_file}[/green]")
            return links_file
            
        except Exception as e:
            console.print(f"[red]Export error: {str(e)}[/red]")
            return None 